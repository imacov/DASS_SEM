[["index.html", "SOST70073 Structural Equation Modelling About", " SOST70073 Structural Equation Modelling Dr. Nick Shryane About Welcome to SOST70073 Structural Equation Modelling! This notebook will host the materials for all R practicals and demonstrations for this course unit. The notebook follows the same section-based structure as the learning materials on Blackboard. To access this notebook, you can bookmark it like any other website in your favourite web browser. For each section, you will have at least one practical to complete and each of these can be accessed by using the sidebar menu on the left hand side of your screen. Clicking on the headings in each section will expand the menu and each task can be accessed individually. The structure and options of this R notebook is identical to that of SOST70033 Data Science Modelling. The sidebar menu can be toggled on and off by clicking on the Toggle Sidebar button. Other customisation options include changing the font, font size, and the appearance. You also have a handy search button. To enhance your experience on tablet and mobile devices, it is recommended that you hide the sidebar menu and navigate across sections and subsections using the right and left arrows. The code, as well as the output and answers are provided for the practicals at the end of each section. The R code can be copied and pasted directly in your R console or script. 1: Before beginning, it is recommended that you create a RStudio project for this course and work through the exercises and tasks in each section using this project. 2: You should write and save your answers to the exercises and tasks in R scripts. You should have at least one R script for each course section. 3: The recommended approach for a ‘clean’ working directory is to place all the data files you plan to use in a separate folder (e.g. a folder called data) within your R project working directory. You should always use simple names that allow you easy access to the contents when you want to either explore the folder on your machine or specify the path to these folders in R. 4: To build a robust knowledge basis and adequately develop your practical programming skills, it is absolutely essential that you first attempt all practical tasks and exercises on your own before comparing your answers with those provided in this notebook. You must also follow along in all demonstrations that contain code on your own machines (simply reading through the text and code will NOT be sufficient to develop a robust understanding of the method and its implementation in R); note that you may also need to reflect on and answer questions throughout a demonstration as well. "],["overview.html", "Overview", " Overview Section 1: What is Structural Equation Modelling? This section is comprised of one demonstration. We are going to run some linear regression models using the familiar lm() library. Then we’re going to run them using functions from the lavaan library. They will be the same models, with (almost) the same results. The aim is to show you that the basic building block of a SEM is just a regression model. Learning Outcomes: use the lavaan package to fit models to data; recognise the similarities and differences between output produce bylm() and lavaan; appreciate the importance of an experimental design and assess hypotheses; build frequency tables using the janitor package; generate dummy variables using the fastDummies package; generate and interpret visualisations. In this section, you will practice using the functions below. It is highly recommended that you explore these functions further using the Help tab in your RStudio console. You can access the R documentation in the Help tab using? (e.g. ?read.csv) Function Description Package rm() remove objects from environment base ls() list objects base getwd() get working directory base setwd() set working directory base read.csv() read .csv file in table format utils tabyl() generate frequency table janitor dummy_cols() create dummy variables fastDummies head() return first part of object utils mutate() create, modify, delete columns dplyr str_replace() replace matches with new text stringr relocate() change column order dplyr arrange() order rows using column names dplyr geom_boxplot() generate box plot ggplot2 geom_line() connect observations ggplot2 geom_point() generate scatterplot ggplot2 facet_wrap() wrap 1-dimensional ribbon of panels into 2 dimensions ggplot2 group_by() group by one or more variables dplyr summarise() summarise each group down to one row dplyr sem() fit structural equation models lavaan summary() generic function for producing result summaries of models base plot() generate plot base var() compute variance stats glimpse() obtain a glimpse of your data dplyr "],["an-introduction-to-lavaan-how-do-wet-fingers-wrinkle.html", "An Introduction to lavaan: How Do Wet Fingers Wrinkle? Workspace Data Experimental Design Frequency for Variables and Levels The Causal Model Statistical Model Preparing the Data Visualing the Data The lavaan Package TASK 1 TASK 2 TASK 3", " An Introduction to lavaan: How Do Wet Fingers Wrinkle? For this demonstration, we will make use of data from the following study: Kareklas, et al. (2013) “Water-induced finger wrinkles improve handling of wet objects”, Biology Letters, http://dx.doi.org/10.1098/rsbl.2012.0999 Workspace First, we’re going to clear the workspace (beware! This will remove everything from the “environment”). rm(list = ls()) Now, let’s set the working directory. You will remember that the working directory is the folder where R will look for and save files to. If you want to know what your current working directory is, run the command below: getwd() To change it, modify the path in the quotation marks \" \" below to your directory. setwd(&quot;C:/Users/...&quot;) Now let’s load the relevant packages. In this demonstration, we’ll be using the lavaan library, but also a few others: fastDummies which will facilitate the generation of dummy variables, and emeans for computing and plotting estimated marginal means. You must install these prior to loading them. install.packages(&quot;lavaan&quot;) install.packages(&quot;fastDummies&quot;) install.packages(&quot;emmeans&quot;) In addition to these, we will also need tidyverse to allow us to make use of the pipe operator, ggplot2 for plotting results and janitor for generating frequency tables. library(&quot;lavaan&quot;) library(&quot;tidyverse&quot;) library(&quot;janitor&quot;) library(&quot;fastDummies&quot;) library(&quot;ggplot2&quot;) library(&quot;emmeans&quot;) Data We’ll download the data from the internet, and store it in a dataframe called wrinkle. wrinkle &lt;- read.csv(&quot;https://vincentarelbundock.github.io/Rdatasets/csv/Stat2Data/Wrinkle.csv&quot;) Experimental Design The skin on our fingers and toes wrinkles when it has been in water for a few minutes. Why on earth does it do this? The skin on almost all other body parts does not wrinkle when wet. Twenty participants were asked to pick up small objects with the right hand thumb and index finger, pass them through a small hole, grab them with the left hand, and put them into a box that had a hole in the lid. For half the trials, participants had their fingers soaked in water, making the skin wrinkle. On the other half of the trials, the fingers were dry. For half the trials the objects were wet. For the other half, the objects were dry. The time it took the participants to finish the task of passing all of the objects into the box was recorded for each condition: Condition 1: Wet/wrinkled fingers, wet objects Condition 2: Wet/wrinkled fingers, dry objects Condition 3: Dry fingers, wet objects Condition 4: Dry fingers, dry objects Hypothesis: Skin wrinkling is an adaptation to improve grip when in wet environments. That’s why we only need it on our fingers (for handling wet objects) and toes (for walking on wet surfaces). Research Question: Will objects be easier/quicker to handle with wrinkled/wet fingers compared to with dry fingers? Frequency for Variables and Levels Fingers were wet/wrinkled half the time wrinkle %&gt;% tabyl(Fingers) ## Fingers n percent ## non 40 0.5 ## wrinkled 40 0.5 Objects were wet half the time wrinkle %&gt;% tabyl(Objects) ## Objects n percent ## dry 40 0.5 ## wet 40 0.5 Participants 1 to 20 (all four conditions) wrinkle %&gt;% tabyl(Participant) ## Participant n percent ## p1 4 0.05 ## p10 4 0.05 ## p11 4 0.05 ## p12 4 0.05 ## p13 4 0.05 ## p14 4 0.05 ## p15 4 0.05 ## p16 4 0.05 ## p17 4 0.05 ## p18 4 0.05 ## p19 4 0.05 ## p2 4 0.05 ## p20 4 0.05 ## p3 4 0.05 ## p4 4 0.05 ## p5 4 0.05 ## p6 4 0.05 ## p7 4 0.05 ## p8 4 0.05 ## p9 4 0.05 The Causal Model This was an experiment. The values of the predictors (Fingers and Objects) were decided by the experimenters, so they are uncorrelated causes of the outcome (Time). Specific Hypotheses: Handling wet objects will take longer than handling dry objects Handling objects with wet fingers will take longer than with dry fingers Handling wet objects will be faster if done with wet/wrinkled fingers than with dry fingers Handling time for dry objects will NOT be affected by whether the fingers are wet or dry Statistical Model The hypothesis is not simply that wet fingers and wet objects will result in slower handling time, it is that wet fingers will reduce the slowing effect of handling wet objects specifically. This implies an interaction between Fingers and Objects. Preparing the Data First we’ll create numerical dummy variables for having wet (wrinkled) fingers and wet objects. wrinkle &lt;- dummy_cols(wrinkle, select_columns = &quot;Fingers&quot;) wrinkle &lt;- dummy_cols(wrinkle, select_columns = &quot;Objects&quot;) We now have two new dummy variables: Fingers_wrinkled and Objects_wet head(wrinkle) ## rownames Participant Time Condition Fingers Objects WrinkledThenNon ## 1 1 p1 106 non-wrinkled/dry non dry 1 ## 2 2 p2 113 non-wrinkled/dry non dry 2 ## 3 3 p3 94 non-wrinkled/dry non dry 1 ## 4 4 p4 96 non-wrinkled/dry non dry 2 ## 5 5 p5 93 non-wrinkled/dry non dry 1 ## 6 6 p6 123 non-wrinkled/dry non dry 2 ## DryThenWet Fingers_non Fingers_wrinkled Objects_dry Objects_wet ## 1 1 1 0 1 0 ## 2 1 1 0 1 0 ## 3 1 1 0 1 0 ## 4 1 1 0 1 0 ## 5 1 1 0 1 0 ## 6 1 1 0 1 0 And then we create an interaction variable for Fingers and Objects. wrinkle$Interaction &lt;- wrinkle$Fingers_wrinkled*wrinkle$Objects_wet Finally, lets’s re-organise the data so that it can be used with ggplot2, so we can visualise the data. We need to convert the Participant variable to a numeric variable so that we can sort it correctly. We’ll use the str_replace() function from the stringr library to remove the “p” from the Participant variable, and then convert it to a numeric variable using as.numeric(). We’ll then use relocate() from dplyr to move the id variable to the second column. Finally, we’ll use arrange() also from dplyr to sort the dataframe by the id variable. We’ll save the sorted dataframe as wrinkle2. wrinkle2 &lt;- wrinkle %&gt;% mutate(id = as.numeric(str_replace(Participant, &quot;p&quot;, &quot;&quot;))) %&gt;% relocate(id, .after = Participant) %&gt;% arrange(id) Visualing the Data Great, now we have a dataset that we can use with ggplot2. We can use either wrinkle or wrinkle2 to analyse the data with lm() and lavaan. Let’s see the completion time for each condition as a boxplot. wrinkle2 %&gt;% ggplot(aes(x = Fingers, y = Time)) + geom_boxplot() + facet_wrap( ~ Objects) We have four boxplots, one for each condition. The thick black horizontal line in the middle of each box is the median time to complete the task. The upper and lower edges of the box are the 75th and 25th percentiles of completion times for each condition. The “whiskers” extend to the most extreme completion times, that represent the 2.5% and 97.5% percentiles of the data. The dots are “outliers” - completion times that are so extreme that they are outside of the whiskers, which represent 95% of the data. It’s clear that handling wet objects with dry (“non” wrinkled) fingers has the highest median handling time. Let’s now take a look at a line graph of the interaction. First, we compute a summary statistic (the mean) for each condition. wrinkle2_summary &lt;- wrinkle2 %&gt;% group_by(Fingers, Objects) %&gt;% summarise(Mean_time = mean(Time)) ## `summarise()` has grouped output by &#39;Fingers&#39;. You can override using the ## `.groups` argument. Then, we plot the above statistics. wrinkle2_summary %&gt;% ggplot(aes(x = Fingers, y = Mean_time, color = Objects)) + geom_line(aes(group = Objects)) + geom_point() The dots show the mean completion time for each condition. The lines connect the dots for the same object type. The lines are not parallel, which suggests that we have an interaction between Fingers and Objects. However, this graph does not show us the uncertainty in the mean completion times. (The graph is also misleading because the y-axis does not begin at zero, which makes the differences across contitions look larger than they are.) To fully assess our hypotheses, we need to fit statistical models of the mean differences, which take into account the uncertainty in the mean completion times, by computing standard errors (SEs) for the differences. The lavaan Package With lavaan, we define the statistical model as an object and we name it model. The object specification is enclosed in single quotes. As you can see below, the model structure is similar to that of lm(). model &lt;- &#39;Time ~ Fingers_wrinkled + Objects_wet + Interaction&#39; To then fit the model to the data, we use the sem() function. fit_lav &lt;- sem(model, data=wrinkle2, meanstructure = TRUE) One difference is that lavaan does not include intercepts in the model by default, so we have to ask for them by including the option meanstructure = TRUE. Let’s take a look at the output. summary(fit_lav) ## lavaan 0.6-18 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 5 ## ## Number of observations 80 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## Time ~ ## Fingers_wrnkld 0.850 6.257 0.136 0.892 ## Objects_wet 24.600 6.257 3.932 0.000 ## Interaction -15.900 8.849 -1.797 0.072 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .Time 93.300 4.424 21.088 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Time 391.489 61.900 6.325 0.000 As you can see, there is a lot more output than from lm()! For now, we will focus on the part starting at regressions. TASK 1 Fit a linear model using lm() to evaluate the effect of the predictors Fingers and Objects, and their interaction, on outcome Time. Are the specific hypotheses supported by the data? TASK 2 What are the differences between the lm() and lavaan results? Why might these differences exist? TASK 3 How have the results changed after relaxing the independence assumption? Would your answer to the research question change? "],["answers.html", "Answers TASK 1 TASK 2 TASK 3", " Answers For this demonstration, we will make use of data from the following study: Kareklas, et al. (2013) “Water-induced finger wrinkles improve handling of wet objects”, Biology Letters, http://dx.doi.org/10.1098/rsbl.2012.0999 TASK 1 Fit a linear model using lm() to evaluate the effect of the predictors Fingers and Objects, and their interaction, on outcome Time. Are the specific hypotheses supported by the data? Let’s fit the model. fit_lm &lt;- lm(Time ~ Fingers_wrinkled + Objects_wet + Interaction, data = wrinkle2) summary(fit_lm) ## ## Call: ## lm(formula = Time ~ Fingers_wrinkled + Objects_wet + Interaction, ## data = wrinkle2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -29.900 -15.113 -2.025 11.925 80.100 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 93.300 4.539 20.554 &lt; 2e-16 *** ## Fingers_wrinkled 0.850 6.420 0.132 0.89501 ## Objects_wet 24.600 6.420 3.832 0.00026 *** ## Interaction -15.900 9.079 -1.751 0.08391 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 20.3 on 76 degrees of freedom ## Multiple R-squared: 0.1997, Adjusted R-squared: 0.1681 ## F-statistic: 6.323 on 3 and 76 DF, p-value: 0.0006927 If we explore the residuals, we can note that none of the plots reveals a major problem. plot(fit_lm) ## hat values (leverages) are all = 0.05 ## and there are no factor predictors; no plot no. 5 Substantive interpretation of the coefficients: Coefficient Value Interpretation Intercept 93.300 Mean time to handle dry objects with dry hands Fingers_wrinkled 0.850 Additional time to handle dry objects with wet hands Objects_wet 24.600 Additional time to handle wet objects with dry hands Interaction Interaction 15.900 Difference from above when handling wet objects with wet hands The pattern of coefficients supports the hypotheses: Handling wet objects with dry hands takes on average \\(24.6\\) seconds longer than handling dry objects with dry hands, but if the hands are wet when handling the wet objects, it takes \\(15.9\\) seconds less than this: It takes \\(24.6\\) seconds longer to handle wet objects with dry hands than dry objects with dry hands. It takes \\(24.6 - 15.9 = 8.7\\) seconds longer to handle wet objects with wet hands than it takes to handle dry objects with dry hands. However, the SE for the Interaction is \\(9.079\\), so the \\(95%\\) confidence interval is: Lower Bound \\(CI_{95\\%} = -15.9 - (2 \\times 9.079) = -34.058\\) Upper bound \\(CI_{95\\%} = -15.9 + (2 \\times 9.079) = 2.258\\) This shows us the plausible range of values for the interaction in the population. This range includes zero - the effect could plausibly be zero in the population. The interaction effect is therefore non-significant. The key hypothesis of an interaction between Fingers and Wrinkled is not supported by the results of this model. TASK 2 What are the differences between the lm() and lavaan results? Why might these differences exist? The estimates for the b coefficients are exactly the same. The standard errors are all a bit smaller. This is because this model was not estimated using OLS. By default, lavaan uses “maximum likelihood” (ML) estimation. ML uses an iterative algorithm that selects the model parameters that were “most likely” to have resulted in the observed data. ML makes an additional assumption that OLS does not - it assumes the residuals are normally distributed. If the residuals are plausibly from a normal distribution, the ML estimator is more “efficient”, especially in small samples. “Efficient” means that it has smaller standard errors. Because the SEs are slightly smaller, the p-values are also slightly lower. However, the Interaction effect is still non-significant (\\(p=0.072\\)). lavaan hasn’t given us \\(R^2\\), but we can work it out for ourselves: \\(R^2 = \\frac{(var_0 - var_1)}{var_0}\\), where \\(var_0\\) is the variance of the outcome variable, and \\(var1\\) is the variance of the residuals after fitting the model. From the output, we find that \\(var_1\\) (residual variance of Time) is \\(391.489\\). We can then obtain \\(var_0\\) by: var_0 &lt;- var(wrinkle2$Time) Therefore, \\(R^2 = \\frac{(495.3899 - 391.489)}{495.3899} = 0.21\\) This is slightly higher than the value computed by lm(), because lavaan uses the sample size \\(N\\) to compute variances, rather than \\(N-1\\) as lm() does. TIP: To get the same \\(R^2\\) as lm(), include the option: likelihood = \"wishart\" in the model estimation command. An assumption of both lm() and lavaan models above is that the observations are independent. Let’s see: glimpse(wrinkle2) ## Rows: 80 ## Columns: 14 ## $ rownames &lt;int&gt; 1, 21, 41, 61, 2, 22, 42, 62, 3, 23, 43, 63, 4, 24, 4… ## $ Participant &lt;chr&gt; &quot;p1&quot;, &quot;p1&quot;, &quot;p1&quot;, &quot;p1&quot;, &quot;p2&quot;, &quot;p2&quot;, &quot;p2&quot;, &quot;p2&quot;, &quot;p3&quot;,… ## $ id &lt;dbl&gt; 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,… ## $ Time &lt;int&gt; 106, 139, 107, 118, 113, 138, 97, 106, 94, 136, 117, … ## $ Condition &lt;chr&gt; &quot;non-wrinkled/dry&quot;, &quot;non-wrinkled/wet&quot;, &quot;wrinkled/dry… ## $ Fingers &lt;chr&gt; &quot;non&quot;, &quot;non&quot;, &quot;wrinkled&quot;, &quot;wrinkled&quot;, &quot;non&quot;, &quot;non&quot;, &quot;… ## $ Objects &lt;chr&gt; &quot;dry&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;wet… ## $ WrinkledThenNon &lt;int&gt; 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1,… ## $ DryThenWet &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ Fingers_non &lt;int&gt; 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,… ## $ Fingers_wrinkled &lt;int&gt; 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0,… ## $ Objects_dry &lt;int&gt; 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,… ## $ Objects_wet &lt;int&gt; 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,… ## $ Interaction &lt;int&gt; 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,… There are only 20 participants, but there are 80 rows of data: Each participant did the task four times, and has four rows of data. These observations are therefore not independent, they are clustered within participants. This violates the independence assumption of the residuals in these simple linear models. What can we do? With lavaan, we can relax this assumption by allowing for the clustering when computing the model SEs (the independence assumption only affects the SEs, not the b-values themselves. fit_lav_clus &lt;- sem(model, data = wrinkle2, meanstructure = TRUE, cluster = &quot;Participant&quot;) The cluster command tells lavaan that the observations (rows) are clustered within values of Participant. It then computes “robust” SEs, taking this non-independence into account. summary(fit_lav_clus) ## lavaan 0.6-18 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 5 ## ## Number of observations 80 ## Number of clusters [Participant] 20 ## ## Model Test User Model: ## Standard Scaled ## Test Statistic 0.000 0.000 ## Degrees of freedom 0 0 ## ## Parameter Estimates: ## ## Standard errors Robust.cluster ## Information Observed ## Observed information based on Hessian ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## Time ~ ## Fingers_wrnkld 0.850 2.573 0.330 0.741 ## Objects_wet 24.600 3.833 6.418 0.000 ## Interaction -15.900 2.365 -6.722 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .Time 93.300 3.191 29.243 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .Time 391.489 139.008 2.816 0.005 TASK 3 How have the results changed after relaxing the independence assumption? Would your answer to the research question change? YES! The values of the b-coefficients have not changed, but the SEs are now corrected for clustering within participants and are now very much smaller than before. (This is unusual - for much social data we would expect the SEs to be larger after correction for clustering, but this was a well-designed experiment where the clustering was “explained” by the design.) The SE for the Interaction is \\(2.365\\), so the \\(95%\\) confidence interval is: Lower Bound \\(CI_{95\\%} = -15.9 - (2 \\times 2.365) = -20.63\\) Upper bound \\(CI_{95\\%} = -15.9 + (2 \\times 2.365) = -11.17\\) The \\(95%\\) confidence interval does NOT include zero! The plausible population values for the improvement in handling time for wet objects when the hands are wet/wrinkled compared to dry is now between \\(11.17\\) and \\(20.63\\) seconds faster. In summary, lavaan can do everything that lm() can do, and much, much more as we will see. But be aware that there are differences, for example in the default methods for model estimation (ML vs OLS). "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
